// #include <Arduino.h>
// #include <IRremote.hpp>
// #include <FastLED.h>
// #include "SCoop.h"

// #define RCLK 4	// 74HC595 锁存器  大平台
// #define SRCLK 3 // 595 时钟         活塞
// #define SER 2	// 595 data input    资料

// #define big RCLK   // 大平台
// #define push SRCLK // 活塞
// #define datain SER // 资料

// #define LED_STRIP_PIN 5 // 灯带

// #define R_PIN 9
// #define G_PIN 10
// #define B_PIN 11

// #define IR_PIN 7

// #define SWITCH_PIN 8

// #define num595 2 // The number of 595

// #define NUM_LEDS 60         // 定义LED数量，根据实际灯带长度修改
// #define BRIGHTNESS 20      // 设置亮度（0到255之间）
// #define LED_TYPE WS2812B    // 定义LED类型
// #define COLOR_ORDER GRB     // WS2812B的颜色顺序为GRB

// byte sheet[num595];

// CRGB led_strip[NUM_LEDS];        // 灯带数组


// // effect functions declaration
// void effect1(); 
// void effect2(); 


// void (*effects[2])() = {effect1, effect2};

// byte effects_count = sizeof(effects) / sizeof(effects[0]);

// byte current_statue = 1;
// // 0: off
// // 1: effect0
// // 2: effect1

// int hue = 0;
// unsigned short led_delay = 500;


// unsigned long currentMillis = 0;

// unsigned long lastKeepoffUpdate = 0;
// unsigned long lastSwitchUpdate = 0;
// unsigned long lastIRUpdate = 0;
// unsigned long lastRGBUpdate = 0;
// unsigned long lastLEDUpdate = 0;
// unsigned long lastLEDStripUpdate = 0;


// // unsigned long lastEffectUpdate = 0;

// bool rgb_on = true;
// bool led_on = true;
// bool led_strip_on = true;




// void sheet_clear()
// {
// 	memset(sheet, B11111111, num595);
// }

// void set_sheet_bit(byte pos, bool value)
// {
// 	byte byteIndex = pos / 8;          // 找到目标字节
//     byte bitIndex = 7 - (pos % 8);     // 确定位于目标字节中的位位置（从高位到低位）

//     if (value) {
//         sheet[byteIndex] |= (1 << bitIndex);   // 设置该位为 1
//     } else {
//         sheet[byteIndex] &= ~(1 << bitIndex);  // 清除该位为 0
//     }

// }


// void Register_update_with_lines(byte lines[num595])
// {
// 	/** Update register with given lines
// 	 * @param byte lines[num595]
// 	 */

// 	digitalWrite(RCLK, LOW);

// 	for (int i = num595-1; i >= 0; i--)
// 	{
// 		shiftOut(SER, SRCLK, LSBFIRST, sheet[i]);
// 	}

// 	digitalWrite(RCLK, HIGH);
// }

// void Register_clear()
// {
// 	for(int i = 0; i < 2; i++){
// 		byte lines[num595];
// 		memset(lines, B11111111, num595);
// 		Register_update_with_lines(lines);
// 	}

// 	// for (int i = 0; i < num595; i++)
// 	// {
// 	// 	byte l[] = {B11111111};
// 	// 	Register_update_with_lines(l);
// 	// 	delay(10);
// 	// }
	


	
// }

// void Register_update_no_clear()
// {
// 	// Update the register without clearing it 
// 	// 		in order to reach higher speed.

// 	Register_update_with_lines(sheet);
// }

// void Register_update()
// {
// 	// Update the register.
// 	// Use this method to update it with file-scope sheet.


// 	Register_clear();
// 	Register_update_no_clear();
// }

// // HSV到RGB的转换函数
// void hsv_to_rgb(int h, int s, int v, byte &r, byte &g, byte &b)
// {
// 	float H = h / 360.0f;
// 	float S = s / 100.0f;
// 	float V = v / 100.0f;

// 	int i = (int)(H * 6.0f);
// 	float f = H * 6.0f - i;
// 	float p = V * (1.0f - S);
// 	float q = V * (1.0f - f * S);
// 	float t = V * (1.0f - (1.0f - f) * S);

// 	float r_float, g_float, b_float;
// 	switch (i % 6)
// 	{
// 	case 0:
// 		r_float = V, g_float = t, b_float = p;
// 		break;
// 	case 1:
// 		r_float = q, g_float = V, b_float = p;
// 		break;
// 	case 2:
// 		r_float = p, g_float = V, b_float = t;
// 		break;
// 	case 3:
// 		r_float = p, g_float = q, b_float = V;
// 		break;
// 	case 4:
// 		r_float = t, g_float = p, b_float = V;
// 		break;
// 	case 5:
// 		r_float = V, g_float = p, b_float = q;
// 		break;
// 	}

// 	r = (byte)(r_float * 255);
// 	g = (byte)(g_float * 255);
// 	b = (byte)(b_float * 255);
// }

// void rgbThread()
// {
// 	/**
// 	 * Update the rgb only by update the value of HSV.
// 	 * This method provides smoother visual transitions.
// 	 */

// 	// 计算并更新RGB颜色
// 	byte r, g, b;
// 	hsv_to_rgb(hue, 100, 100, r, g, b); // 获取当前的RGB颜色
// 	analogWrite(R_PIN, r);
// 	analogWrite(G_PIN, g);
// 	analogWrite(B_PIN, b);

// 	// 增加hue值来使颜色变化
// 	hue = (hue + 10) % 360;
// }

// byte r = 255, g = 0, b = 0;

// void rgbThread_2()
// {
// 	/**
// 	 * Update the rgb only by update the value of RGB
// 	 * 		in order to reach higher speed.
// 	 */


// 	byte step = 10;
// 	 if (r == 255 && g < 255 && b == 0) {      // 红 -> 黄
//         g += step;
//         if (g > 255) g = 255;
//     } else if (r > 0 && g == 255 && b == 0) { // 黄 -> 绿
//         r -= step;
//         if (r < 0) r = 0;
//     } else if (r == 0 && g == 255 && b < 255) { // 绿 -> 青
//         b += step;
//         if (b > 255) b = 255;
//     } else if (r == 0 && g > 0 && b == 255) {   // 青 -> 蓝
//         g -= step;
//         if (g < 0) g = 0;
//     } else if (r < 255 && g == 0 && b == 255) { // 蓝 -> 紫
//         r += step;
//         if (r > 255) r = 255;
//     } else if (r == 255 && g == 0 && b > 0) {   // 紫 -> 红
//         b -= step;
//         if (b < 0) b = 0;
//     }

//     // 更新RGB引脚的输出
//     analogWrite(R_PIN, r);
//     analogWrite(G_PIN, g);
//     analogWrite(B_PIN, b);

// }

// void turn_on()
// {
// 	rgb_on = true;
// 	led_on = true;
// 	led_strip_on = true;

// }

// void turn_off()
// {

// 	rgb_on = false;
// 	led_on = false;
// 	led_strip_on = false;

// 	digitalWrite(R_PIN, HIGH);
// 	digitalWrite(G_PIN, HIGH);
// 	digitalWrite(B_PIN, HIGH);

// 	Register_clear();

// }

// void to_previous_statue()
// {
// 	if (current_statue == 0)
// 	{
// 		turn_on();
// 		current_statue = effects_count;

// 	}else if (current_statue == 1)
// 	{
// 		// when current_statue is the first effect
// 		// turn it on
// 		current_statue = 0;
// 		turn_off();


// 	}else
// 	{
// 		turn_on();
// 		current_statue--;
		
// 	}
	
// }

// void to_next_statue()
// {
// 	if (current_statue == effects_count)
// 	{
// 		// when current_statue is the last
// 		// turn it off

// 		current_statue = 0;
// 		turn_off();
// 	}else
// 	{
// 		turn_on();
// 		current_statue++;
		
// 	}
	

// }

// byte reliable_count = 3;

// short trigger_times = 0;

// defineTaskLoop(switchThread)
// {
// 	static byte high_count = 0;

	
//     if (digitalRead(SWITCH_PIN) == HIGH) 
// 	{
// 		Serial.println("Switch detected");
// 		high_count++;
// 		Serial.println(high_count);
// 	}
	

// 	if (high_count >= reliable_count) 
// 	{
// 		to_next_statue();
// 		high_count = 0;

// 		trigger_times++;

// 		Serial.println("Cumulative trigger times");
// 		Serial.println(trigger_times);

		
// 		Serial.println("Current statue");
// 		Serial.println(current_statue);
// 	}

// 	sleep(50);
// }

// void switchThread2()
// {
// 	if (digitalRead(SWITCH_PIN) == HIGH)
// 	{
// 		to_next_statue();
// 		Serial.println("Statue Switched");

// 	}
	
// }


// void irThread()
// {
// 	if (IrReceiver.decode())
// 	{

// 		// Print it to Serial
// 		Serial.println(IrReceiver.decodedIRData.decodedRawData, HEX);
// 		IrReceiver.printIRResultShort(&Serial);

// 		switch (IrReceiver.decodedIRData.decodedRawData)
// 		{
// 			case 0xBA45FF00: // Keypad button "power"

// 				if (current_statue != 0)
// 				{
// 					current_statue = 0;
// 					turn_off();
// 				}else
// 				{
// 					current_statue = 1;
// 					turn_on();
// 				}
				

// 				break;

// 			case 0xBF40FF00: // Keypad button "Previous"
// 				to_previous_statue();
// 				break;

// 			case 0xBC43FF00: // Keypad button "Next"
// 				to_next_statue();
// 				break;

// 			case 0xE916FF00: // Keypad button "0"
// 				turn_off();
// 				break;

// 			case 0xF30CFF00: // Keypad button "1"
// 				break;


// 			case 0xAD52FF00: // Keypad button "8"

// 				// just turn on
// 				turn_on();

// 				break;

// 			case 0xB54AFF00: // Keypad button "9"

// 				// just turn off
// 				turn_off();
// 				break;

// 			default:
// 				break;
// 		}

// 		IrReceiver.resume(); // Enable receiving of the next value
// 	}
// }


// void effect1()
// {
// 	// test effect
// 	sheet[0] = B01111111;
// 	sheet[1] = B11111111;
// 	Register_update();

// }


// void effect2()
// {
// 	// Flow forward and back
// 	led_delay = 500;
// 	static byte i = 0;
// 	static bool forward = true;

// 	sheet_clear();

// 	if (i == (num595*8-1))
// 	{
// 		forward = false;
// 	}else if (i == 0)
// 	{
// 		forward = true;
// 	}
	
	
	
// 	set_sheet_bit(i, 0);
// 	Register_update();

// 	forward ? i++ : i--;
	
// }



// void ledThread()
// {

// 	effects[current_statue-1]();

// }

// void ledStripThread()
// {

// 	static uint8_t hue = 0;   // 定义初始色相，从0开始
// 	fill_rainbow(led_strip, NUM_LEDS, hue, 7);  // 使用彩虹效果填充灯带，每个LED色相差为7

// 	FastLED.show();           // 更新灯带显示
// 	hue++;                    // 增加色相，使颜色逐渐变化

// }

// void setup()
// {

// 	pinMode(SWITCH_PIN, INPUT);

// 	pinMode(RCLK, OUTPUT);
// 	pinMode(SRCLK, OUTPUT);
// 	pinMode(SER, OUTPUT);

// 	pinMode(R_PIN, OUTPUT);
// 	pinMode(G_PIN, OUTPUT);
// 	pinMode(B_PIN, OUTPUT);

// 	Serial.begin(9600);
// 	IrReceiver.begin(IR_PIN, ENABLE_LED_FEEDBACK);

// 	FastLED.addLeds<LED_TYPE, LED_STRIP_PIN, COLOR_ORDER>(led_strip, NUM_LEDS).setCorrection(TypicalLEDStrip);
//   	FastLED.setBrightness(BRIGHTNESS);

// 	mySCoop.start();
// }

// void loop()
// {

// 	yield();

// 	currentMillis = millis();


// 	if (currentMillis - lastIRUpdate >= 50)
// 	{
// 		lastIRUpdate = currentMillis;

// 		irThread();
// 	}


	
	
// 	// is_on == false 直接下一次 loop

// 	if (currentMillis - lastKeepoffUpdate >= 200)
// 	{
// 		lastKeepoffUpdate = currentMillis;
// 		if (current_statue == 0)
// 		{
// 			turn_off();
// 		}
		
		
// 	}
	


// 	if (rgb_on)
// 	{
// 		if (currentMillis - lastRGBUpdate >= 100)
// 		{
// 			lastRGBUpdate = currentMillis;

// 			rgbThread();
// 		}
// 	}

// 	if (led_on)
// 	{
// 		if (currentMillis - lastLEDUpdate >= led_delay)
// 		{
// 			lastLEDUpdate = currentMillis;

// 			ledThread();
// 		}
// 	}

// 	if (led_strip_on)
// 	{
// 		if (currentMillis - lastLEDStripUpdate >= 100)
// 		{
// 			lastLEDStripUpdate = currentMillis;

// 			ledStripThread();
// 		}
// 	}
	
// }
